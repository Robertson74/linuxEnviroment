# to.be.ok
snippet c.ok
expect(${1:false}).to.be.ok;${3}
endsnippet
snippet c.notok
expect(${1:true}).to.not.be.ok;${3}
endsnippet
snippet c.eql
expect(${1:null}).to.eql(${2:""});${3}
endsnippet
snippet c.equal
expect(${1:null}).to.equal(${2:""});${3}
endsnippet
snippet c.iof
expect(${1:null}).to.be.instanceof(${2:false});${3}
endsnippet
snippet c.tohave
expect(${1:null}).to.have.property(${2:"property"});${3}
endsnippet
snippet c.tobe
expect(${1:null}).to.be.a("${2:}");${3}
endsnippet

# fast .a(type) versions
snippet c.bestr
expect(${1:null}).to.be.a("string");${2}
endsnippet
snippet c.bearray
expect(${1:null}).to.be.a("array");${2}
endsnippet
snippet c.beobj
expect(${1:null}).to.be.a("object");${2}
endsnippet
snippet c.benull
expect(${1:""}).to.be.a("null");${2}
endsnippet
snippet c.beun
expect(${1:""}).to.be.a("undefined");${2}
endsnippet
snippet c.error
let err: Error = new Error();
try {
	${1:obj}.${2:method}(${3:param});
} catch (e) {
	err = e;
}
expect(err).to.be.a("Error");
expect(err.message).to.equal("${4:error message}");
endsnippet

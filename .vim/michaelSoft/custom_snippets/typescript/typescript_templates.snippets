snippet customValidation "custom class-validator decorator"
import {registerDecorator, ValidationOptions,
  ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments} from "class-validator";

@ValidatorConstraint({ async: false })
export class ${1:contraintName}Constraint implements ValidatorConstraintInterface {

  public validate(${2:validationArg}, args: ValidationArguments): boolean {
    return ${3:num.toString().length === args.constraints[0] &&
      typeof num === "number";}
  }

  public defaultMessage(args: ValidationArguments) {
    return "${4:$value isn't right}";
  }

}

export function $1($2, validationOptions?: ValidationOptions): Function {
  return (object: Object, propertyName: string) => {
    registerDecorator({
      target: object.constructor,
      propertyName,
      options: validationOptions,
      constraints: [$2${5:}],
      validator: $1Constraint
    });
  };
}
endsnippet

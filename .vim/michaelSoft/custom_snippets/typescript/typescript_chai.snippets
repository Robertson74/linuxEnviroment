# to.be.ok
snippet c.ok
expect(${1:false}).to.be.ok;${3}
endsnippet
snippet c.notok
expect(${1:true}).to.not.be.ok;${3}
endsnippet
snippet c.equal
expect(${1:null}).to.equal(${2:""});${3}
endsnippet
snippet c.iof
expect(${1:null}).to.be.instanceof(${2:false});${3}
endsnippet
snippet c.tohave
expect(${1:null}).to.have.property(${2:"property"});${3}
endsnippet
snippet c.tobe
expect(${1:null}).to.be.a("${2:}");${3}
endsnippet

# fast .a(type) versions
snippet c.bestr
expect(${1:null}).to.be.a("string");${2}
endsnippet
snippet c.bearray
expect(${1:null}).to.be.a("array");${2}
endsnippet
snippet c.beobj
expect(${1:null}).to.be.a("object");${2}
endsnippet
snippet c.benull
expect(${1:""}).to.be.a("null");${2}
endsnippet
snippet c.beun
expect(${1:""}).to.be.a("undefined");${2}
endsnippet
snippet c.t
expect(${1:""}).to.be.true;
endsnippet
snippet c.f
expect(${1:""}).to.be.false;
endsnippet
snippet c.thr "set up throw expectation"
expect(() => ${1:obj}.${2:meth}(${3:arg})).to.throw(${4:Error});
endsnippet
snippet c.rej "set up rejection expectation"
expect(${1:obj}.${2:meth}(${3:arg})).to.eventually.be.rejected;
endsnippet

snippet c.asExpected "set up chai as promised"
import * as chai from "chai";
import * as chaiAsPromised from "chai-as-promised";
before(() => {
	chai.should();
	chai.use(chaiAsPromised);
});
endsnippet

snippet c.beforeE "before each"
beforeEach(() => {
	// setup default instances
});
endsnippet

snippet c.afterE "after each"
afterEach(() => {
	// setup default instances
});
endsnippet


snippet c.notequal "chai not equal assertion"
      expect(${1:}).to.not.equal(${2:});
endsnippet

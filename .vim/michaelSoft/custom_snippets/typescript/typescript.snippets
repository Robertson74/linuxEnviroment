snippet meth "class/object method" b
${1:}(${2:args}): ${3:returnType} {
	${4://code}
}
endsnippet

snippet ameth "async class/object method" b
async ${1:}(${2:args}): ${3:returnType} {
	${4://code}
}
endsnippet

snippet () "fat arrow iife"
((${1:}) => {
${2:// code}
})();
endsnippet

snippet void "void"
${3:let} ${1:varName}: void = "${2:text}";
endsnippet

snippet st "string"
${3:let} ${1:varName}: string = "${2:text}";
endsnippet

snippet nu "number"
${3:let} ${1:varName}: number = ${2:10};
endsnippet

snippet bl "boolean"
${3:let} ${1:varName}: boolean = ${2:flase};
endsnippet
 
snippet any "any"
${3:let} ${1:varName}: any = ${2:value};
endsnippet
 
snippet arr "array"
${4:let} ${1:varName}: ${2:type}[] = [${3:val, val}];
endsnippet

snippet gm "getter method" bm
private _${1:propName}: ${2:propType};

get $1(): $2 {
	return this._$1;
}
endsnippet

snippet sm "setter method" bm
private _${1:propName}: ${2:propType};

set $1($1: $2) {
	this._$1 = $1;
}
endsnippet

snippet gs "Property w/ getter setter" bm
private _${1:propName}: ${2:propType};

get $1(): $2 {
	return this._$1;
}

set $1($1: $2) {
	this._$1 = $1;
}
endsnippet

snippet res "quick resolve a promise"
${3:}Promise.resolve(${1:})${2:;}
endsnippet
	
snippet rej "quick reject a promise"
${3:}Promise.reject(${1:})${2:;}
endsnippet

snippet ctor "constructor" b
constructor(${0}) {
	${1:// code}
}
endsnippet

snippet cls "class .." b
${5:export} class ${1:ClassName} {
	${2: constructor(${3:args}) {
    ${4://code...}
  }}
}
endsnippet

snippet clse "class .." b
${6:export} class ${1:ClassName} extends ${2:ParentClass} {
	${3: constructor(${4:args}) {
    ${5://code...}
  }}
}
endsnippet

snippet clsi "class .." b
${6:export} class ${1:ClassName} implements ${2:interface} {
	${3: constructor(${4:args}) {
		${5://code...}
	}}
}
endsnippet


snippet itf "interface .." b
${5:export} interface ${1:InterfaceName}${2: extends ${3:Parent}} {
	${4://code...}
}
endsnippet

snippet import "imports a module" b
import $1 = require('$2')
endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet af "arrow function (af)"
(${1:argument}) => {
	${VISUAL}$0
}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
}
else {
	${3://code}
}
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet meth "class/object method" b
${2:methodName}(${3:args}): ${4:returnType} {
		${0://code}
}
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch (${2:e}) {
	${4:throw new Error(${3:e});}
}
endsnippet

snippet im "import xyz from 'xyz'"
import ${2} from "${1:}";
endsnippet
snippet imas "import * as xyz from 'xyz'"
import * as ${2} from "${1:}";
endsnippet
snippet imm "import { member } from 'xyz'"
import { ${2} } from "${1}";
endsnippet

snippet => "es6 function"
${1:funName}(${2:params}): ${3:returnVal} => {
  ${4:code}
}
endsnippet

snippet pubmeth "public method"
public ${1:}(): ${2:returnType} {
  //code
}
endsnippet

snippet pubameth "public async method"
public async ${1:}(): ${2:returnType} {
  //code
}
endsnippet

snippet primeth "private method"
private ${1:}(): ${2:returnType} {
  //code
}
endsnippet

snippet priameth "private async method"
private async ${1:}(): ${2:returnType} {
  //code
}
endsnippet

snippet nest.module "Nest Module"
import { Module } from "@nestjs/common";

@Module({${2:}})
export class ${1:Application}Module {}
endsnippet

snippet nest.controller "Nest Controller"
import { Controller, HttpException, HttpStatus } from "@nestjs/common";

@Controller()
export class ${1:Test}Controller {
  constructor() {}
}
endsnippet

snippet nest.pipe "Nest Pipe"
import { PipeTransform, Pipe, ArgumentMetadata } from "@nestjs/common";

@Pipe()
/* tslint:disable-next-line:no-any */ // generic pipe
export class ${1:Test}Pipe implements PipeTransform<any> {
    public transform(value, metadata: ArgumentMetadata) {
        return value;
    }
}
endsnippet

snippet nest.component "Nest Component"
import { Component } from "@nestjs/common";

@Component()
export class ${1:Test}Service {
    constructor() {}
}
endsnippet

snippet nest.component.useValue "Nest useValue component"
export const ${1:connection}Provider = {
  provide: "${2:token}",
  useValue: ${3:value}
};
endsnippet

snippet nest.component.useFactory "Nest factory component"
export const ${1:}Factory = [
  {
    provide: "${2:Token}",
    useFactory: ${3:async} (${4:}): ${5:returnVal} => {${6:}}
  }
];
endsnippet

snippet nest.middleware.module "module middleware setup"
export class ${1:Module} implements NestModule {
  public configure(consumer: MiddlewaresConsumer): void {
    consumer.apply(${2:middlwareClass}).forRoutes(
      { path: "${3:path}", method: RequestMethod.${4:verb} }
    );
  }
}
endsnippet

snippet nest.customDecorator "nest custom decorator"
import { createRouteParamDecorator } from "@nestjs/common";

export const ${1:decoratorName} = createRouteParamDecorator((data, req) => {
  return ${2:req.user};
});
endsnippet

snippet nest.middleware "synchronous nest middleware"
import { Middleware, NestMiddleware, ExpressMiddleware } from "@nestjs/common";

@Middleware()
export class ${1:}Middleware implements NestMiddleware {

  resolve(): ExpressMiddleware {

    return (req, res, next) => {
      next();
    };

  }
}
endsnippet

snippet nest.middlewareAsync "async nest middleware"
import { Middleware, NestMiddleware, ExpressMiddleware } from "@nestjs/common";

@Middleware()
export class ${1:}Middleware implements NestMiddleware {

  async resolve(): Promise<ExpressMiddleware> {

    return async (req, res, next) => {
      next();
    };

  }
}
endsnippet

snippet nest.interceptor "nest interceptor"
import { Interceptor, NestInterceptor, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

@Interceptor()
export class ${1:Name}Interceptor implements NestInterceptor {
  intercept(dataOrRequest, context: ExecutionContext, stream$: Observable<any>): Observable<any> {
    ${2:return stream$.map((data) => ({ data }));}
  }
}
endsnippet

snippet nest.mixinInterceptor "template for a mixin class"
import { Interceptor, NestInterceptor, ExecutionContext, mixin } from "@nestjs/common";
import { Observable } from "rxjs/Observable";
import { wrapSuccess } from "../../nma-platform/nma_core/utils/envelope";
import { classToPlain } from "class-transformer";
import { Reflector } from "@nestjs/core/services/reflector.service";
import "rxjs/add/operator/map";

/* tslint:disable:no-any max-classes-per-file */
@Interceptor()
abstract class $1Base implements NestInterceptor {

  protected abstract readonly $2: () => $3;

  constructor(private readonly reflector: Reflector) {}

  public intercept(dataOrRequest: Object, context: ExecutionContext, stream$: Observable<any>): Observable<any> {
	  ${6:}// before
    return stream$.map((data: any) => {
			// after
      const message: string = this.reflector.get<string>("message", context.handler);
      return wrapSuccess(classToPlain(data), message);
    });
  }

}

export function ${1:SuccessInterceptor}(${2:message}: () => ${3:string}): any {

	// default the variable
  const ${4:successMessage}: () => $3 = $2 ? $2 : () => ${5:default};

  return mixin(class extends $1Base {
    protected readonly $2: () => $3 = $4;
  });

}
endsnippet

snippet mock "mock object"
const mock$1: ${1:obj} = mock($1);
endsnippet

snippet mocki "mock object with instance call"
const mock$1: ${1:obj} = mock($1);
const test$1: $2 = instance(mock$1);
endsnippet

snippet mockw "mock object with when setup"
const mock$1: ${1:obj} = mock($1);
when(mock$1.${2:})${4:}.thenReturn(${3:});
endsnippet

snippet spy "set up a spy on an object"
const spy$1: ${1:obj} = spy($1);
endsnippet

snippet when "set up new return value"
when(${1:obj}.${2:}(${3:}))${5:}.thenReturn(${4:returnValu});
endsnippet

snippet whent "set up new throw"
when(${1:}.${2:}(${4:}))${7:}.thenThrow(${6:new Error("${5}")});
endsnippet

snippet whenr "set up a resolve mock"
when(${1:}.${2:}(${4:}))
	${7:}.thenResolve(${6:});
endsnippet

snippet whenrej "set up a resolve mock"
when(${1:}.${2:}(${4:}))
	${7:}.thenReject(${6:});
endsnippet

snippet whenc "set up call"
when(${1:obj}.${2:}(${4:callVal})).thenCall((${5:}) => {
	${6:// code}
});
endsnippet

snippet inst "instance from mock setup"
${4}instance(${3:mock})${7:;}
endsnippet

snippet templateTest "a mockito unit test template"
import * as chai from "chai";
import { expect } from "chai";
import * as chaiAsPromised from "chai-as-promised";
import { anyOfClass, anything, instance, mock, reset, spy, verify, when } from "ts-mockito/lib/ts-mockito";

describe("${1:Class}", () => {

  // enables "chai-as-promised"
  before(() => {
    chai.use(chaiAsPromised);
  });

  // fake values

  // mocks

  // class under test

	// spies

  beforeEach(() => {
		// default mock behaviours
		// reset test under class and spies
  });

  afterEach(() => {
    // mock resets
  });

  describe("${7:method}", () => {

    it("${7:should do a thing}", async () => {
      // when(${8:mock}.${9:method}()).thenReturn(${10:return});
      // expect(${11:something}).to.be.true;
    });

  });
});
endsnippet

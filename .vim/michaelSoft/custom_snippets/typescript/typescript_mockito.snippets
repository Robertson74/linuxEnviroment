snippet mock "mock object"
const ${1:var}: ${2:obj} = mock($2);
endsnippet

snippet mocki "mock object with instance call"
const mock${1:var}: ${2:obj} = mock($2);
const test$1: $2 = instance(mock$1);
endsnippet

snippet mockw "mock object with when setup"
const mock${1:var}: ${2:obj} = mock($2);
when(mock$1.${3:method}).thenReturn(${4:return});
const test$1: $2 = instance(mock$1);
endsnippet

snippet when "set up new return value"
when(${1:obj}.${2:meth}${3:(${4:callVal})}).thenReturn(${5:returnValu});
endsnippet

snippet whenT "set up new throw"
when(${1:obj}.${2:meth}${3:(${4:callVal})}).thenThrow(${5:new Error()});
endsnippet

snippet whenC "set up call"
when(${1:obj}.${2:meth}${3:(${4:callVal})}).thenCall((${5:}) => {
	${6:// code}
});
endsnippet

snippet inst "instance from mock setup"
let ${1:obj}: ${2:type} = instance(${3:mock});
endsnippet

snippet templateTest "a mockito unit test template"
import * as chai from "chai";
import { expect } from "chai";
import * as chaiAsPromised from "chai-as-promised";
import { instance, mock, verify, when, reset, anything } from "ts-mockito/lib/ts-mockito";

describe("${1:Class}", () => {

  // test class
  ${2:// test class here}

  // mocks
  ${3:// mocks here}

  // fake values
  ${4:// fake values here}

  // enables "chai-as-promised"
  before(() => {
    chai.use(chaiAsPromised);
  });

  beforeEach(() => {
    ${5:// set up mocks/default behaviors here}
  });

  afterEach(() => {
    ${6:// reset mocks here}
  });

  describe("${7:method}", () => {

    it("${7:should do a thing}", async () => {
      when(${8:mock}.${9:method}()).thenReturn(${10:return});
      expect(${11:something}).to.be.true;
    });

  });
});
endsnippet
